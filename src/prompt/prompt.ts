import readline from 'readline';

type Response = {
  target: string;
  strategy: 'binary' | 'UTF8';
  populationSize: number;
  naturalSelectionSize: number;
  generations: number;
  aimedScore: number;
};

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const askQuestion = (query: string): Promise<string> => {
  return new Promise((resolve) => rl.question(query, resolve));
};

const validateUnsignedInteger = (value: string, fieldName: string): number => {
  const number = parseInt(value, 10);
  if (isNaN(number) || number < 0) {
    rl.close();
    throw new Error(`Invalid ${fieldName}: must be an unsigned number.`);
  }
  return number;
};

export const getUserInputs = async (): Promise<Response | undefined> => {
  try {
    const target = await askQuestion('Enter target string: ');
    const strategy: Response['strategy'] = (await askQuestion(
      'Enter encoding strategy "binary" ("b") or "binary UTF8" ("u"): '
    )) as Response['strategy'];

    if (!['binary', 'b', 'u', 'UTF8'].includes(strategy)) {
      throw new Error(`Strategy is invalid must be 'binary', 'b', 'u', 'UTF8'`);
    }

    const populationSize = validateUnsignedInteger(
      await askQuestion('Enter number of individuals (population size): '),
      'populationSize'
    );

    const naturalSelectionSize = validateUnsignedInteger(
      await askQuestion(
        'Enter number of individuals generated by natural selection (should be <= population size): '
      ),
      'naturalSelectionSize'
    );

    if (naturalSelectionSize > populationSize) {
      throw new Error(
        `Invalid naturalSelectionSize: should be <= populationSize.`
      );
    }

    const generations = validateUnsignedInteger(
      await askQuestion('Enter number of generations: '),
      'generations'
    );

    const aimedScore = validateUnsignedInteger(
      await askQuestion('Enter aimed score (percent): '),
      'aimedScore'
    );

    if (aimedScore > 100 || aimedScore < 0) {
      throw new Error(`Invalid aimedScore: should be a percent.`);
    }

    rl.close();

    return {
      target,
      strategy,
      populationSize,
      naturalSelectionSize,
      generations,
      aimedScore,
    };
  } catch (e) {
    rl.close();
    console.error(e);
    process.exit(1);
  }
};
